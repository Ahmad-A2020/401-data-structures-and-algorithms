/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList;
//import LinkedList.Main;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

class LinkedListTest {
    @BeforeEach
    public void setup(){
        LinkedList linkedList = new LinkedList();
    }
    // create empty linklist

    @Test void emptylinkedlist() {
        LinkedList linkedList = new LinkedList();

        assertEquals(null,linkedList.head,"created empty linked list");
    }
    // test insert method
    @Test void insertTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");


        assertEquals("3",linkedList.head.value);
    }
    // test includes method true
    @Test void includesTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        assertEquals(true,linkedList.includes("2"));


    }
    // test includes method false
    @Test void includesTestFalse(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        assertEquals(false,linkedList.includes("5"));


    }
    @Test void to_stringTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        linkedList.insert("4");

        assertEquals("4<<3<<2",linkedList.to_string());
    }
    @Test void appendTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        linkedList.insert("4");
        linkedList.append("0");
        assertEquals("4<<3<<2<<0",linkedList.to_string(),"append to the end of the list ");

    }
    @Test void insertBefore(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        linkedList.insert("4");
        linkedList.append("0");
        linkedList.insertBefore("2","1");

        assertEquals("4<<3<<1<<2<<0",linkedList.to_string(),"append before certain item ");

    }
    @Test void insertAfter(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("2");
        linkedList.insert("3");
        linkedList.insert("4");
        linkedList.append("0");
        linkedList.insertBefore("2","1");
        linkedList.insertAfter("2","-1");

        assertEquals("4<<3<<1<<2<<-1<<0",linkedList.to_string(),"append After certain item ");

    }
    // lab 07 test
    // Where k is greater than the length of the linked list
    @Test
    public void kthFromEndTest1(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("1");
        linkedList.insert("3");
        linkedList.insert("8");
        linkedList.insert("2");
        assertEquals("the k value is bigger than the array size",linkedList.kthFromEnd(5));
    }
    // Where k and the length of the list are the same
    @Test
    public void kthFromEndTest2(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("1");
        linkedList.insert("3");
        linkedList.insert("8");
        linkedList.insert("2");
        assertEquals("2",linkedList.kthFromEnd(3));
    }
    // Where k is not a positive integer
    @Test
    public void kthFromEndTest3(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("1");
        linkedList.insert("3");
        linkedList.insert("8");
        linkedList.insert("2");
        assertEquals("you enter negative value !",linkedList.kthFromEnd(-1));
    }
    // Where the linked list is of a size 1
    @Test
    public void kthFromEndTest5(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("1");

        assertEquals("1",linkedList.kthFromEnd(0));
    }
    // “Happy Path” where k is not at the end, but somewhere in the middle of the linked list
    @Test
    public void kthFromEndTest6(){
        LinkedList linkedList = new LinkedList();
        linkedList.insert("1");
        linkedList.insert("3");
        linkedList.insert("8");
        linkedList.insert("2");
        assertEquals("8",linkedList.kthFromEnd(2));
    }
}
