/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList;
import LinkedList.Node;

public class LinkedList {

    Node head;
    public void insert (String data){
        if (this.head==null) {
            this.head = new Node(data);
//            System.out.println(this.head.value);


        }else{
            Node current = this.head;
            this.head= new Node(data);
            this.head.next= current;
//            System.out.println(this.head.value);

        }

    }
    public boolean includes(String value){
        Node current = this.head;
        while(current.getNext() != null){
            if (current.value==value){
                return true;
            }
            current = current.getNext();
        }
        if (current.value==value){
            return true;
        }else{
            return false;

        }
    }
    public String to_string(){
        String allValues= "";
        Node current = this.head;
        while (current.getNext() != null){
            allValues = allValues+current.value+"<<" ;
            current=current.getNext();

        }
        allValues += current.value;
        return allValues;
    }

    public void append(String newvalue){
        Node current = this.head;
        Node newNode = new Node(newvalue);

        while(current.getNext() != null){
            current = current.getNext();

        }
        current.next= newNode;
    }
     public void insertBefore(String v1, String v2){
        Node newNode = new Node(v2);
        Node current= this.head;
        Node previousNode= current;
        while(  current.getNext() != null ){
            if (current.value == v1){
                newNode.next=current;
                previousNode.next=newNode;
                break;
            }
            previousNode= current;
            current = current.getNext();
        }

     }
    public void insertAfter(String v1, String v2){
        Node newNode = new Node(v2);
        Node current= this.head;
        Node afterCurrent;
        while(  current.getNext() != null ){
            if (current.value == v1){
                afterCurrent= current.getNext();
                current.next=newNode;
                newNode.next=afterCurrent;
                break;
            }
            current = current.getNext();
        }

    }


}


